<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.yunqing</groupId>
    <artifactId>boot-demos</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>


    <name>boot-demos</name>


    <properties>
        <java.version>11</java.version>
        <boot-demos.version>1.0-SNAPSHOT</boot-demos.version>
        <spring.boot.version>2.3.4.RELEASE</spring.boot.version>
        <!-- Docker build -->
        <docker.image.prefix>yunqing71</docker.image.prefix>
        <docker.image.exposed.port>8080</docker.image.exposed.port>
        <dockerfile.plugin.version>1.4.13</dockerfile.plugin.version>
        <docker.image.tag>${project.version}</docker.image.tag>
        <dockerfile.maven.settings.auth>true</dockerfile.maven.settings.auth>
    </properties>

    <modules>
        <module>demo-a-test</module>
        <module>demo-mybatis-plus</module>
        <module>demo-mybatis-mbg</module>
        <module>demo-redis</module>
        <module>demo-configuration-properties</module>
        <module>demo-hutool</module>
        <module>demo-web-log</module>
        <module>demo-json-result</module>
        <module>demo-leetcode</module>
        <module>demo-elasticsearch</module>
        <module>demo-swagger</module>
        <module>demo-spring-tx</module>
        <module>demo-distributed-lock</module>
        <module>demo-context</module>
        <module>demo-spring</module>
        <module>demo-netty</module>
        <module>demo-juc</module>
        <module>design-pattern</module>
        <module>demo-rabbitmq</module>
        <module>demo-redisson</module>
        <module>oss-spring-boot-starter</module>
        <module>demo-oss</module>
        <module>xxl-job-register-starter</module>
        <module>demo-jetcache</module>
        <module>demo-integration</module>
        <module>limiter-spring-boot-starter</module>
    </modules>

    <!--单个项目配置阿里云镜像仓库，优先于settings.xml中的配置，阿里云镜像替代maven默认的仓库：central-->
    <!--<repositories>
        <repository>
            <id>central</id>
            <name>aliyun maven</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <layout>default</layout>
            &lt;!&ndash; 是否开启发布版构件下载 &ndash;&gt;
            <releases>
                <enabled>true</enabled>
            </releases>
            &lt;!&ndash; 是否开启快照版构件下载 &ndash;&gt;
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    &lt;!&ndash;阿里插件镜像仓库&ndash;&gt;
    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>aliyun nexus</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.kangqing</groupId>
                <artifactId>oss-spring-boot-starter</artifactId>
                <version>1.0.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <!--配置使springboot认识自定义yml配置-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.8.4</version>
        </dependency>
        <!--国密-->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15to18</artifactId>
            <version>1.68</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <!--springfox swagger官方Starter-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>
        <!--google guava-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>32.0.0-jre</version>
        </dependency>
        <!--
            fastjson
        -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.83</version>
        </dependency>
    </dependencies>
    <!-- 使用分发管理将本项目打成jar包，直接上传到指定服务器 -->
    <!--<distributionManagement>
        &lt;!&ndash;正式版本&ndash;&gt;
        <repository>
            &lt;!&ndash; nexus服务器中用户名：在settings.xml中<server>的id&ndash;&gt;
            <id>maven-releases</id>
            &lt;!&ndash; 这个名称自己定义 &ndash;&gt;
            <name>Nexus Release</name>
            <url>http://127.0.0.1:8081/repository/maven-releases</url>
        </repository>
        &lt;!&ndash;快照&ndash;&gt;
        <snapshotRepository>
            <id>maven-snapshots</id>
            <name>Nexus Snapshot</name>
            <url>http://127.0.0.1:8081/repository/maven-snapshots</url>
        </snapshotRepository>
    </distributionManagement>-->

    <build>
        <finalName>${project.artifactId}</finalName>
        <!--
        <plugins>-->
            <!-- 资源文件拷贝插件,xml,html打包进项目 -->
        <!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        -->
            <!-- Java 编译插件 -->
        <!--    <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>-->

            <!-- 打包时跳过测试 -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
    -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                </configuration>
                <executions>
                    <execution>
                        <!-- Spring Boot Actuator displays build-related information if a META-INF/build-info.properties file is present -->
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                        <configuration>
                            <additionalProperties>
                                <encoding.source>${project.build.sourceEncoding}</encoding.source>
                                <encoding.reporting>${project.reporting.outputEncoding}</encoding.reporting>
                                <java.source>${maven.compiler.source}</java.source>
                                <java.target>${maven.compiler.target}</java.target>
                            </additionalProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--用于将打包完成发布到远程仓库，也可配置跳过发布-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <!--<configuration>
                    <skip>true</skip>
                </configuration>-->
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- Spotify Dockerfile Maven -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>${dockerfile.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>default</id>
                            <goals>
                                <goal>build</goal>
                                <goal>push</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <repository>${docker.image.prefix}/${project.artifactId}</repository>
                        <contextDirectory>${basedir}</contextDirectory>
                        <tag>${docker.image.tag}</tag>
                        <!-- 注意在本地.m2/settings.xml中设置dockerhub账号和密码，利用circleci中的dockerhub用户名密码替代这里 -->
                        <useMavenSettingsForAuth>${dockerfile.maven.settings.auth}</useMavenSettingsForAuth>
                        <buildArgs>
                            <ARTIFACT_NAME>target/${project.build.finalName}</ARTIFACT_NAME>
                            <EXPOSED_PORT>${docker.image.exposed.port}</EXPOSED_PORT>
                        </buildArgs>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


</project>